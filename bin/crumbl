#!/usr/bin/env ruby

begin
  require 'crumbl'
  require 'thor'
rescue LoadError
  require 'rubygems'
  require 'crumbl'
  require 'thor'
end

class CrumblCmd < Thor
  desc "decode [COOKIE]", "Decode a Rails 3 cookie [COOKIE]"
  def decode(cookie)
    puts Crumbl.new.decode cookie
  end

  desc "encode [KEY]", "Encode [DATA] as a Rails 3 cookie signed with secret key [KEY]"
  def encode(key)
    puts "Data to encode: "
    data = read_eval
    encoded = Crumbl.new.encode data, key
    show_result encoded
  end

  desc "decrypt [KEY BASE] [COOKIE]", "Decrypt Rails 4 [COOKIE] using secret key base [KEY BASE]"
  method_option :iterations,                   :aliases => "-i",  :type => :numeric
  method_option :encrypted_cookie_salt,        :aliases => "-e"
  method_option :encrypted_signed_cookie_salt, :aliases => "-s"
  def decrypt(secret_key_base, cookie)
    crumbl = Crumbl.new do |opts|
      opts[:iterations]                   = options[:iterations]
      opts[:encrypted_cookie_salt]        = options[:encrypted_cookie_salt]
      opts[:encrypted_signed_cookie_salt] = options[:encrypted_signed_cookie_salt]
    end
    puts crumbl.decrypt cookie, secret_key_base
  end

  desc "encrypt [KEY BASE]", "Encrypt Rails 4 [DATA] using secret key base [KEY BASE]"
  method_option :iterations,                   :aliases => "-i", :type => :numeric
  method_option :encrypted_cookie_salt,        :aliases => "-e"
  method_option :encrypted_signed_cookie_salt, :aliases => "-s"
  def encrypt(secret_key_base)
    puts "Data to encrypt: "
    data = read_eval
    crumbl = Crumbl.new do |opts|
      opts[:iterations]                   = options[:iterations]
      opts[:encrypted_cookie_salt]        = options[:encrypted_cookie_salt]
      opts[:encrypted_signed_cookie_salt] = options[:encrypted_signed_cookie_salt]
    end
    encrypted = crumbl.encrypt data, secret_key_base
    show_result encrypted
  end

  no_commands do
    def read_eval
      print "crumbl> "
      input = get_input
      if input.is_json?
        result = JSON.parse(input).to_s
      else
        result = input
      end
    end

    def show_result result
      puts("=> #{result}")
    end

    def get_input
      STDIN.gets.chomp!
    end
  end
end

CrumblCmd.start