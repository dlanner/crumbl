#!/usr/bin/env ruby

begin
  require 'crumbl'
  require 'thor'
rescue LoadError
  require 'rubygems'
  require 'crumbl'
  require 'thor'
end

class CrumblCmd < Thor
  desc "decode [COOKIE]", "Decode a Rails 3 cookie [COOKIE]"
  def decode(cookie)
    puts Crumbl.decode cookie
  end

  desc "encode [KEY]", "Encode [DATA] as a Rails 3 cookie signed with secret key [KEY]"
  def encode(key)
    puts "Data to encode: "
    data = read_eval_print
    puts Crumbl.encode data, key
  end

  desc "decrypt [KEY BASE] [COOKIE]", "Decrypt Rails 4 [COOKIE] using secret key base [KEY BASE]"
  method_option :iterations,                   :aliases => "-i", :default => Crumbl::DEFAULT_ITERATIONS, :type => :numeric
  method_option :encrypted_cookie_salt,        :aliases => "-e", :default => Crumbl::DEFAULT_ENCRYPTED_COOKIE_SALT
  method_option :encrypted_signed_cookie_salt, :aliases => "-s", :default => Crumbl::DEFAULT_ENCRYPTED_SIGNED_COOKIE_SALT
  def decrypt(secret_key_base, cookie)
    puts Crumbl.decrypt cookie, secret_key_base, options[:iterations], options[:encrypted_cookie_salt], options[:encrypted_signed_cookie_salt]
  end

  desc "encrypt [KEY BASE]", "Encrypt Rails 4 [DATA] using secret key base [KEY BASE]"
  method_option :iterations,                   :aliases => "-i", :default => Crumbl::DEFAULT_ITERATIONS, :type => :numeric
  method_option :encrypted_cookie_salt,        :aliases => "-e", :default => Crumbl::DEFAULT_ENCRYPTED_COOKIE_SALT
  method_option :encrypted_signed_cookie_salt, :aliases => "-s", :default => Crumbl::DEFAULT_ENCRYPTED_SIGNED_COOKIE_SALT
  def encrypt(secret_key_base)
    puts "Data to encrypt: "
    data = read_eval_print
    puts Crumbl.encrypt data, secret_key_base, options[:iterations], options[:encrypted_cookie_salt], options[:encrypted_signed_cookie_salt]
  end

  desc "", "Start interactive mode"
  def interactive_mode
    loop do
      read_eval_print
    end
  end
  default_task :interactive_mode

  no_commands do
    def read_eval_print
      print "crumbl> "
      input = get_input
      result = eval(input)
      puts("=> #{result}")
      result
    end

    def get_input
      STDIN.gets.chomp!
    end
  end
end

CrumblCmd.start